#!/bin/bash

# Simplified HTML to EPUB converter for debugging
# Usage: ./html2epub_simple.sh <input.html> [output.epub]

set -e

if [ $# -lt 1 ]; then
    echo "Usage: $0 <input.html> [output.epub]"
    exit 1
fi

INPUT_HTML="$1"
OUTPUT_EPUB="${2:-${INPUT_HTML%.html}.epub}"

# Check if input file exists
if [ ! -f "$INPUT_HTML" ]; then
    echo "Error: Input file '$INPUT_HTML' not found"
    exit 1
fi

# Check if pandoc is installed
if ! command -v pandoc &> /dev/null; then
    echo "Error: pandoc is required but not installed"
    exit 1
fi

echo "Converting $INPUT_HTML to $OUTPUT_EPUB..."

# Extract title from HTML (simplified)
extract_title() {
    local html_file="$1"
    local title=""
    
    # Try to extract from <title> tag
    title=$(grep -i '<title>' "$html_file" | head -1 | sed 's/<[^>]*>//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g')
    
    # If still empty, use filename
    if [ -z "$title" ]; then
        title=$(basename "$html_file" .html)
    fi
    
    echo "$title"
}

# Extract metadata
BOOK_TITLE=$(extract_title "$INPUT_HTML")
BOOK_AUTHOR="Generated by html2epub"

echo "üìñ Title: $BOOK_TITLE"
echo "üë§ Author: $BOOK_AUTHOR"

# Store original directory
ORIGINAL_DIR=$(pwd)

# Create temporary directory
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

echo "Working in temp directory: $TEMP_DIR"

# Copy HTML to temp directory
cp "$INPUT_HTML" "$TEMP_DIR/input.html"

# Get HTML directory for image paths
HTML_DIR=$(dirname "$INPUT_HTML")

# Copy images directory if it exists
if [ -d "$HTML_DIR/media" ]; then
    echo "Copying media directory..."
    cp -r "$HTML_DIR/media" "$TEMP_DIR/"
fi

# Change to temp directory
cd "$TEMP_DIR"

# Create CSS file
cat > style.css << 'EOF'
body { 
    font-family: Georgia, serif; 
    line-height: 1.6; 
    max-width: 800px; 
    margin: 0 auto; 
    padding: 20px; 
}
img { 
    max-width: 100%; 
    height: auto; 
    display: block; 
    margin: 20px auto; 
}
h1, h2, h3, h4, h5, h6 { 
    color: #333; 
    margin-top: 30px; 
}
p { 
    text-align: justify; 
    margin-bottom: 15px; 
}
EOF

# Find first image for cover
FIRST_IMAGE=""
if [ -d "media" ]; then
    FIRST_IMAGE=$(find media -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | head -1)
    if [ -n "$FIRST_IMAGE" ]; then
        echo "üì∏ Found cover image: $FIRST_IMAGE"
    fi
fi

# Build pandoc command
OUTPUT_BASENAME=$(basename "$OUTPUT_EPUB")

echo "Converting to EPUB with pandoc..."
echo "Output file: $OUTPUT_BASENAME"

# Simple pandoc command
if [ -n "$FIRST_IMAGE" ] && [ -f "$FIRST_IMAGE" ]; then
    echo "Using cover image: $FIRST_IMAGE"
    pandoc input.html \
        --from html \
        --to epub3 \
        --output "$OUTPUT_BASENAME" \
        --standalone \
        --metadata title="$BOOK_TITLE" \
        --metadata author="$BOOK_AUTHOR" \
        --epub-cover-image="$FIRST_IMAGE" \
        --css style.css
else
    echo "No cover image found, converting without cover"
    pandoc input.html \
        --from html \
        --to epub3 \
        --output "$OUTPUT_BASENAME" \
        --standalone \
        --metadata title="$BOOK_TITLE" \
        --metadata author="$BOOK_AUTHOR" \
        --css style.css
fi

# Check if conversion was successful
if [ -f "$OUTPUT_BASENAME" ]; then
    # Move to original directory
    mv "$OUTPUT_BASENAME" "$ORIGINAL_DIR/"
    
    echo ""
    echo "‚úÖ EPUB created successfully!"
    echo "üìÅ File: $ORIGINAL_DIR/$OUTPUT_BASENAME"
    echo "üìñ Title: $BOOK_TITLE"
    echo "üë§ Author: $BOOK_AUTHOR"
    
    # Show file size
    if [ -f "$ORIGINAL_DIR/$OUTPUT_BASENAME" ]; then
        FILE_SIZE=$(stat -f%z "$ORIGINAL_DIR/$OUTPUT_BASENAME" 2>/dev/null || stat -c%s "$ORIGINAL_DIR/$OUTPUT_BASENAME" 2>/dev/null || echo "unknown")
        echo "üíæ File size: $FILE_SIZE bytes"
    fi
else
    echo "‚ùå EPUB conversion failed"
    echo "Contents of temp directory:"
    ls -la
    exit 1
fi